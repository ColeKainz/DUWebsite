{% extends "forms/field.html.twig" %}
{% set defaults = config.plugins.form %}
{% set files = defaults.files|merge(field|default([])) %}
{% set limit = not field.multiple ? 1 : files.limit %}

{% macro bytesToSize(bytes) -%}
    {% spaceless %}
        {% set kilobyte = 1024 %}
        {% set megabyte = kilobyte * 1024 %}
        {% set gigabyte = megabyte * 1024 %}
        {% set terabyte = gigabyte * 1024 %}

        {% if bytes < kilobyte %}
            {{ bytes ~ ' B' }}
        {% elseif bytes < megabyte %}
            {{ (bytes / kilobyte)|number_format(2, '.') ~ ' KB' }}
        {% elseif bytes < gigabyte %}
            {{ (bytes / megabyte)|number_format(2, '.') ~ ' MB' }}
        {% elseif bytes < terabyte %}
            {{ (bytes / gigabyte)|number_format(2, '.') ~ ' GB' }}
        {% else %}
            {{ (bytes / terabyte)|number_format(2, '.') ~ ' TB' }}
        {% endif %}
    {% endspaceless %}
{%- endmacro %}

{% block stylesheets %}
{% endblock %}

{% block input %}
	<div {% if field.outerclasses is defined %}class="{{ field.outerclasses }}" {% endif %}>
		<div class="image">
			{% if form.data.avatar %}
				<img src="{{ (form.data.avatar|first).path }}" width="200px" height="325px" id="avatar"/>
			{% else %}
				<img src="https://www.gravatar.com/avatar/{{ form.data.email|md5 }}?s=200x325" id="avatar"/>
			{% endif %}		
			<label>Image size 200 x 325 only.</label>
		</div>
		{% set page_can_upload = exists or (type == 'page' and not exists and not (field.destination starts with '@self' or field.destination starts with 'self@')) %}
		{% set settings = {name: field.name, paramName: (scope ~ field.name)|fieldName , limit: limit, filesize: form_max_filesize, accept: files.accept} %}
		<div class="form-input-wrapper dropzone files-upload form-input-file {{ field.size }}" data-grav-file-settings="{{ settings|json_encode|e('html_attr') }}">
			<input
				{# required attribute structures #}
				{% block input_attributes %}
					type="file"
					accept="image/*"
					id="avatarSelector"
					size="50"
					name="avatar"
					class="hidden"
					{% if field.disabled %}disabled="disabled"{% endif %}
					onchange="handleFiles()"
					{{ parent() }}
				{% endblock %}
			/>
		</div>
	</div>
    {% do assets.addJs('jquery', 101) %}
    {% do assets.addJs('plugin://form/assets/form.min.js', { 'group': 'bottom', 'loading': 'defer' }) %}
    {% do assets.addCss('plugin://form/assets/dropzone.min.css', { 'group': 'form' }) %}
    {{ assets.css('form')|raw }}
    {% do assets.addInlineJs("
    window.GravForm = window.GravForm || {};
    window.GravForm.config = {
        current_url: '" ~ uri.route(true) ~"',
        base_url_relative: '" ~ base_url_relative ~ "',
        param_sep: '"~ config.system.param_sep ~ "',
        form_nonce: '" ~ form.getNonce ~ "',
    };
    window.GravForm.translations = {};
    window.GravForm.translations['PLUGIN_FORM'] = {
        'DROPZONE_CANCEL_UPLOAD': " ~ 'PLUGIN_FORM.DROPZONE_CANCEL_UPLOAD'|t|json_encode ~ ",
        'DROPZONE_CANCEL_UPLOAD_CONFIRMATION': " ~ 'PLUGIN_FORM.DROPZONE_CANCEL_UPLOAD_CONFIRMATION'|t|json_encode ~ ",
        'DROPZONE_DEFAULT_MESSAGE': " ~ 'PLUGIN_FORM.DROPZONE_DEFAULT_MESSAGE'|t|json_encode ~ ",
        'DROPZONE_FALLBACK_MESSAGE': " ~ 'PLUGIN_FORM.DROPZONE_FALLBACK_MESSAGE'|t|json_encode ~ ",
        'DROPZONE_FALLBACK_TEXT': " ~ 'PLUGIN_FORM.DROPZONE_FALLBACK_TEXT'|t|json_encode ~ ",
        'DROPZONE_FILE_TOO_BIG': " ~ 'PLUGIN_FORM.DROPZONE_FILE_TOO_BIG'|t|json_encode ~ ",
        'DROPZONE_INVALID_FILE_TYPE': " ~ 'PLUGIN_FORM.DROPZONE_INVALID_FILE_TYPE'|t|json_encode ~ ",
        'DROPZONE_MAX_FILES_EXCEEDED': " ~ 'PLUGIN_FORM.DROPZONE_MAX_FILES_EXCEEDED'|t|json_encode ~ ",
        'DROPZONE_REMOVE_FILE': " ~ 'PLUGIN_FORM.DROPZONE_REMOVE_FILE'|t|json_encode ~ ",
        'DROPZONE_REMOVE_FILE_CONFIRMATION': " ~ 'PLUGIN_FORM.DROPZONE_REMOVE_FILE_CONFIRMATION'|t|json_encode ~ ",
        'DROPZONE_RESPONSE_ERROR': " ~ 'PLUGIN_FORM.DROPZONE_RESPONSE_ERROR'|t|json_encode ~ "
    };
    ", { 'group': 'bottom' }) %}
{% endblock %}
